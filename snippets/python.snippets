snippet #!
	#!/usr/bin/env python
snippet cla
	class ${1:ClassName}(${2:BassClassName}):
		"""
		${3:docstring for $1}.
		"""
		${4}
snippet clam
	class ${1:ModelName}(${2:BassModelName}):
		"""
		${3:A model of a $1}.
		"""
		${4:properties}

		def __unicode__(self):
			return self.${5:property}:

		class Meta:
			${6:meta properties}
snippet def
	def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
		"""${3:docstring for $1}"""
		${4:pass}
snippet deff
	def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
		${3}
snippet defs
	def ${1:mname}(self, ${2:arg}):
		${3:pass}
snippet docs
	'''
	File: ${1:`Filename('$1.py', 'foo.py')`}
	Author: ${2:`g:snips_author`}
	Description: ${3}
	'''
snippet if:
	if ${1:condition}:
		${2}
snippet ife:
	if ${1:condition}:
		${2}
	else:
		${3}
snippet for
	for ${1:object} in ${2:objects}:
		${3:pass}
	${4}
snippet from
	from ${1:module} import ${2:name}
	${3}
snippet ifmain
	if __name__ == '__main__':
		${1:main()}
snippet imp
	import ${1:module}
	${2}
snippet init
	def __init__(self, ${1:args}):
		${2}
snippet lam
	${1:var} = lambda ${2:vars} : ${3:action}
snippet property
	def ${1:foo}():
		doc = "${2:The $1 property.}"
		def fget(self):
			${3:return self._$1}
		def fset(self, value):
			${4:self._$1 = value}
snippet whi
	while ${1:condition}:
		${2:# code...}
snippet pdb
	import pdb; pdb.set_trace()
	${1}
snippet try Try/Except
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
snippet try Try/Except/Else
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	else:
		${5:pass}
snippet try Try/Except/Finally
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	finally:
		${5:pass}
snippet try Try/Except/Else/Finally
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	else:
		${5:pass}
	finally:
		${6:pass}
